#include <iostream>
using namespace std;

inline int min(int &a, int &b)
{
    return (a > b ? b : a);
}

void inline_function()
{
    /*
    많은 프로그래머들이 자신의 프로그램을 빠르게 만들고 싶어한다.
    그 작업을 위한 것들 중 인라인 함수를 많이 사용한다.

    하지만, 그 실효성에 대해서 무조건적으로 속도가 빨라지는 것은 아니다
    그 이유를 살펴보자. 다음은 inline 함수의 동작 예시다
    */

   cout << min(5, 6) << endl; 
   // inline이 적용되면 아래와 같이 컴파일러가 min 을 그대로 대체해서 컴파일 진행
   cout << ( 5 > 6 ? 6 : 5 ) << endl;

   /*
   그러나 컴파일러는 해당 std의 min 함수와, inline 으로 정의된 min 함수 둘 중
   어떤 것이 적합한지를 보고 결정을 내린다. 
   즉, 개발자가 inline 함수의 대체 여부를 확인하기 어렵다는 것.
   최근에는 inline 으로 정의된 함수가 아니더라도 컴파일러가 적합하게 실행을 하는 경우가
   많다고 한다.
   +) 홍정모씨는 프로그램의 속도는 소프트웨어적으로 올리는 것이 좋지, 무조건 inline 을
      적용해서 빠르게 만드는 것은 옳지 않다고 생각한다. 이에 동의를 하는 부분.
      조건을 잘 따져서 굳이 inline 을 사용하지 않아도 컴파일러가 적합하게 선택하도록 하고,
      소프트웨어 구조적으로 개선될 수 있는 부분을 찾아 적용하는 것이 중요하다고 생각한다 
   */

}